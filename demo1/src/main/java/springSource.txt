spring容器在启动的最开始(refresh()之前的操作)
1、调用了AnnotationConfigApplicationContext的无参构造器
    1）注册了5个主要的内置beanPostProcessor 分别为
    	1、2个beanFactoryPostProcessor bean工厂后置处理器
    	    ConfigurationClassPostProcessor（配置类处理器）
            EventListenerMethodProcessor （事件监听方法处理器）
        2、3个beanPostProcessor bean后置处理器
            CommonAnnotationBeanPostProcessor （通用注解处理器）
            AutowiredAnnotationBeanPostProcessor （自动注入处理器）
            PersistenceAnnotationBeanPostProcessor （JPA注解处理器）
       JPA注解处理器一般不怎么用到,主要用到的是其他4个处理器


spring容器的refresh() 【创建刷新】
1、prepareRefresh(); 刷新前的预处理；
    1）initPropertySources();初始化一些属性设置；子类(子容器)自定义个性化的属性设置方法
    2）getEnvironment().validateRequiredProperties();检验属性的合法 等
    3）this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();保存容器中一些早期的事件
2、obtainFreshBeanFactory();获取beanFactory;
    1）refreshBeanFactory(); 刷新【创建】beanFactory
            创建了一个 this.beanFactory = new DefaultListableBeanFactory();
            设置Id
    2） getBeanFactory(); 返回刚才 GenericApplicationContext 创建的BeanFactory对象
    3） 将创建的BeanFactory【DefaultListableBeanFactory类型的】返回；
3、prepareBeanFactory(beanFactory); BeanFactory的预准备工作(BeanFactory进行一些设置)
    1） 设置beanFactory的类加载器、支持表达式的解析器 等待
    2） 添加部分BeanPostProcessor【ApplicationContextAwareProcessor】
    3） 设置忽略的自动装配接口 EnvironmentAware、EmbeddedValueResolverAware 等等，设置这是不能通过接口类型自动注入的
    4） 注册可以解析的自动装配，我们能直接在任何组件中 自动注入 与上面的恰好相反
            BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext
    5） 添加部分BeanPostProcessor【ApplicationListenerDetector】
    6） 添加编译时的AspectJ 支持
    7） 给BeanFactory中注册默认(缺省)的组件
        environment【ConfigurableEnvironment】
        systemProperties【Map<String, Object>】
        systemEnvironment【Map<String, Object> 】
4、postProcessBeanFactory(beanFactory);BeanFactory 准备工作完成后进行的后置处理工作
    1）子类通过重新这个方法在BeanFactory创建并预准备完成以后做进一步的设置

============================以上是BeanFactory的创建及预准备工作============================

5、invokeBeanFactoryPostProcessors(beanFactory); 执行BeanFactoryPostProcessors();
    BeanFactory的后置处理器。在BeanFactory标准初始化后执行的，标准初始化就是前面的4步
    两个接口：BeanFactoryPostProcessor
             BeanDefinitionRegistryPostProcessor
    1）执行 BeanFactoryPostProcessor 的方法
        先执行 BeanDefinitionRegistryPostProcessor 【具有最高优先级】方法
        他是 BeanFactoryPostProcessor 的子接口
        1、获取所有的 BeanDefinitionRegistryPostProcessor
        2、第一优先级 先执行实现了 PriorityOrdered 优先级接口的
        3、第二优先级 执行实现了 Ordered 顺序接口的
        4、最后执行没有实现 PriorityOrdered 、 Ordered 接口的
           1）spring 有一个自带的 BeanDefinitionRegistryPostProcessor 为 ConfigurationClassPostProcessor
           非常重要，用于解析配置类
           parser.parse(candidates);
                先处理 @ComponentScan 注解 (扫描包)并且注册到容器，如果有@import注解放到下面处理
                processImports 处理 @import 找到所有的类后放到一个map , 在后面注册到容器
           this.reader.loadBeanDefinitions(configClasses);
                注册配置类到容器

        5、再执行 BeanFactoryPostProcessor (与上面逻辑一样)

6、registerBeanPostProcessors(beanFactory); 注册BeanPostProcessor Bean的后置处理器【intercept bean creation】
     不同接口类型的子接口，在Bean创建前后的执行时机是不一样的
     BeanPostProcessor 一共 4 个子接口
     DestructionAwareBeanPostProcessor
     InstantiationAwareBeanPostProcessor
     SmartInstantiationAwareBeanPostProcessor
     MergedBeanDefinitionPostProcessor

    1）获取所有的 BeanPostProcessor 类型的组件名；后置处理器都默认有 PriorityOrdered 、 Ordered 接口
    2）注册 BeanPostProcessor ，同样是也有优先级注册
        registerBeanPostProcessors() 方法就是把每一个 BeanPostProcessor 添加到 beanFactory 中
    3）与其他不同的是，这个在注册完普通的 BeanPostProcessor 后
        最后一步是注册 MergedBeanDefinitionPostProcessor 类型的
    4）还注册一个 new ApplicationListenerDetector(applicationContext)
        在Bean创建完成后检查是否是ApplicationListener,是的话放在容器中保存起来
        this.applicationContext.addApplicationListener((ApplicationListener<?>) bean);

7、initMessageSource();初始化 MessageSource 组件(做国际化功能：消息绑定，消息解析)
    1）获取BeanFactory
    2）看容器中是否有 id 为 messageSource 的组件
        如果有 赋值给 messageSource 属性
        如果没有 自己创建一个  new DelegatingMessageSource();
            MessageSource：取出国际化配置文件中的某个key的值，能按照区域信息获取
    3）把创建号的 MessageSource 注册在容器中，以后获取国际化配置文件的值的时候，可以自动注入 MessageSource

8、initApplicationEventMulticaster();初始化事件派发器
    1）获取 BeanFactory
    2）从 BeanFactory 中获取名称为 applicationEventMulticaster 类型为 ApplicationEventMulticaster 的组件
    3）如果上一步没有配置，创建以后 SimpleApplicationEventMulticaster
    4）将创建的 ApplicationEventMulticaster 注册到容器中 ， 其他组件要使用可自动注入

9、onRefresh();留给子容器实现的(子类)
    1、子类重新这个方法，在容器刷新的时候可以自定义逻辑

10、registerListeners();  给容器中 将所有项目里面 ApplicationListener 注册进来
    1）从容器中拿到所有的 ApplicationListener
    2）将每个监听器 添加到事件派发器中：
      	getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    3）派发之前步骤产生的事件

11、finishBeanFactoryInitialization(beanFactory); 初始化所有剩下的单实例 Bean
    1)	beanFactory.preInstantiateSingletons(); 初始化所有剩下的单实例 Bean
            1、获取容器中的所有bean，依次进行初始化和创建对象
            2、获取bean的定义信息，RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);
            3、bean不是抽象的，是单实例的，不是懒加载的
                1）判断是否是 FactoryBean 是否实现了 FactoryBean 接口的 Bean
                2）不是工厂Bean ，用getBean创建对象 (这个getBean和 app.getBean(""); 一样 只是包装了一层)
                    1、getBean(String name)  ； ioc.geiBean()
                    2、doGetBean(name, null, null, false);
                    3、Object sharedInstance = getSingleton(beanName);
                        先获取缓存中保存的单实例bean，如果能获取到，说明这个bean之前被创建过(所有创建获得单实例bean都会被缓存)
                        从private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);获取的
                    4、缓存中获取不到，开始bean 的创建对象流程
                    5、标记当前 bean 为已经创建 markBeanAsCreated(beanName);
                    6、获取bean定义信息 final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);
                    7、获取当前 bean 依赖的其他 bean  String[] dependsOn = mbd.getDependsOn();
                        在组件上加 @DependsOn 注解 表示创建这个组件之前先创建 DependsOn中的组件
                        在String[] dependsOn = mbd.getDependsOn();不为空时先创建依赖的 bean，同样是调用getBean(dep);方法
                    8、如果是单实例 bean    if (mbd.isSingleton())
                        启动单实例 bean 创建流程
                            1）createBean(beanName, mbd, args);
                            2）Object bean = resolveBeforeInstantiation(beanName, mbdToUse);
                                让 beanPostProcessor 先拦截有机会返回代理对象
                                是 InstantiationAwareBeanPostProcessors 类型的
                            3）如果没有返回代理对象
                            4）Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建bean
                                1、【创建bean实例】 createBeanInstance(beanName, mbd, args);
                                    利用工厂方法或者对象的构造器创建出 bean 实例
                                2、applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
                                    调用 MergedBeanDefinitionPostProcessors 接口的方法
                                3、【bean属性赋值】 populateBean(beanName, mbd, instanceWrapper);
                                    1）拿到 InstantiationAwareBeanPostProcessor 后置处理器
                                        执行 postProcessAfterInstantiation() 方法
                                    2）拿到 InstantiationAwareBeanPostProcessor 后置处理器
                                        执行 postProcessPropertyValues() 方法
                                    ==============赋值之前==============
                                    3）应用 Bean 属性的值，为属性利用setter方法等赋值
                                        applyPropertyValues();
                                4、【bean初始化】initializeBean(beanName, exposedObject, mbd);
                                    1）【执行xxxAware接口的方法】invokeAwareMethods(beanName, bean);
                                        BeanNameAware 、 BeanClassLoaderAware 、 BeanFactoryAware
                                    2）【执行后置处理器初始化之前】applyBeanPostProcessorsBeforeInitialization()
                                        BeanPostProcessor.postProcessBeforeInitialization();
                                    3）【执行初始化方法】 invokeInitMethods(beanName, wrappedBean, mbd);
                                        1、判断是否是InitializingBean 接口的实现，执行接口规定的初始化
                                        2、是否自定义初始化方法 invokeCustomInitMethod(beanName, bean, mbd);
                                    4）【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization()
                                        BeanPostProcessor.postProcessAfterInitialization();
                                5、【注册bean的销毁方法】registerDisposableBeanIfNecessary(beanName, bean, mbd);
                            5）将创建的 bean 添加到缓存中 singletonObjects 中
                                ioc 容器就是这些Map 很多的Map里面保存了单例 Bean ,环境信息....
            4、所有 bean 都利用getBean() 方法创建完成以后
                检查所有的 bean 是否是 SmartInitializingSingleton 接口的
                如果是执行 afterSingletonsInstantiated() 方法
12、finishRefresh() 完成 beanFactory 的初始化创建工作；IOC容器创建完成
    1）initLifecycleProcessor();初始化和生命周期有关的后置处理器；
        默认从容器中找是否有 LifecycleProcessor 组件，如果没有  new DefaultLifecycleProcessor();
        加入到容器中，方便自动注入
        LifecycleProcessor，允许我们写一个实现类，可以在BeanFactory 的
            onRefresh();
            onClose();
    2）getLifecycleProcessor().onRefresh();
        拿到前面定义的生命周期处理器(监听BeanFactory生命周期的)，回调onRefresh()方法
    3）publishEvent(new ContextRefreshedEvent(this));
        发布容器刷新完成事件
    4）LiveBeansView.registerApplicationContext(this);
        暴露一些 MBean

================总结================
1、Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息
    1）XML注册bean <bean>
    2）注解注册bean @service @component @bean 等等
2、Spring容器会在合适的时机创建这些Bean
    1）用到这个 bean 的时候；都是利用 getBean() 方法创建 bean，创建好保存在容器中
    2）统一创建剩下所有 bean 的时候
        finishBeanFactoryInitialization() ： 初始化所有剩下的单实例 bean
3、后置处理器：
    1）每一个 bean 创建完成，都会使用各种后置处理器进行处理，来增前 bean 的功能
        AutowiredAnnotationBeanPostProcessor : 处理自动注入
        AnnotationAwareAspectJAutoProxyCreator : 来做AOP功能
        AsyncAnnotationBeanPostProcessor
        等等
4、事件驱动模型
    ApplicationListener 事件监听
    ApplicationEventMulticaster 事件派发

